(function(a){"use strict";var b=function(c,d,e){function f(o){return h.body?o():void setTimeout(function(){f(o)})}// Note: the ternary preserves the existing behavior of "before" argument, but we could choose to change the argument to "after" in a later release and standardize on ref.nextSibling for all refs
function g(){j.addEventListener&&j.removeEventListener("load",g),j.media=e||"all"}var k,h=a.document,j=h.createElement("link");if(d)k=d;else{var l=(h.body||h.getElementsByTagName("head")[0]).childNodes;k=l[l.length-1]}var m=h.styleSheets;j.rel="stylesheet",j.href=c,j.media="only x",f(function(){k.parentNode.insertBefore(j,d?k:k.nextSibling)});var n=function(o){for(var p=j.href,q=m.length;q--;)if(m[q].href===p)return o();setTimeout(function(){n(o)})};return j.addEventListener&&j.addEventListener("load",g),j.onloadcssdefined=n,n(g),j};"undefined"==typeof exports?a.loadCSS=b:exports.loadCSS=b})("undefined"==typeof global?this:global);