{"version":3,"sources":["custom.scss","../../source/scss/dependencies/_layout.scss","../../source/scss/dependencies/_type.scss","../../node_modules/modularscale-sass/stylesheets/modular-scale/_calc.scss","../../node_modules/mappy-breakpoints/_mappy-breakpoints.scss","../../source/scss/dependencies/_open-color.scss","../../source/scss/dependencies/_color.scss"],"names":[],"mappings":"AAaA,SAGE,cAAc,AACd,eAAgB,CACjB,AALD,eCWI,cAAc,AACd,WAAW,AACX,UAAW,CACZ,ADPH,eCsDI,cAAc,AACd,WAAW,ACuBX,iBAAiB,AACjB,oBAAoB,AACpB,YAAY,AACZ,sBCvFsC,ADwFtC,gBA1FW,AA2FX,iBAAiB,AF9EnB,eAAgB,CACjB,AAND,qBCII,cAAc,AACd,WAAW,AACX,UAAW,CACZ,AGmBD,wBJ1BF,eC0DM,UAAU,AACV,gBAAiC,AACjC,mBAAmB,AACnB,UAAW,CDvDhB,CAAA,AAND,iBEgBE,+CAAiD,AACjD,yCAA6C,AAC7C,4CAA8C,AAC9C,aG0JY,CH1HX,AFnDH,8CEuBI,gIAAA,AAAyO,wGAAA,AACzO,6KI7BQ,CJ2CT,AFtCH,8EE2BM,mBG8IQ,AH7IR,iNG6IQ,CLzKd,AE6BK,oEAFC,mBG8IQ,AH7IR,iNG6IQ,CH5IT,AF7BL,kSEoCM,gBAAiB,CAClB,AFrCL,qBEsFM,cAAc,AACd,UAAU,AACV,aAAc,AACd,iBAAiB,AACjB,oBAAqB,AACrB,yBGkFQ,AHjFR,UAAW,CACZ,AAED,sBACE,eAnGU,CAoGX,AAED,sBACE,eAlGU,CAmGX,AF7FL,cCiCI,cAAc,AACd,WAAW,AD7Bb,cAAc,AACd,WAAY,CAcb,AApBD,oBCJI,cAAc,AACd,WAAW,AACX,UAAW,CACZ,AGmBD,wBJlBF,cCqCM,UAAU,AACV,gBAAiC,AACjC,kBAAkB,AAClB,WAAY,CDpBjB,CAAA,AApBD,gBEQE,+CAAiD,AACjD,yCAA6C,AAC7C,4CAA8C,AAC9C,aG0JY,CH1HX,AF3CH,4CEeI,gIAAA,AAAyO,wGAAA,AACzO,6KI7BQ,CJ2CT,AF9BH,4EEmBM,mBG8IQ,AH7IR,iNG6IQ,CLjKd,AEqBK,kEAFC,mBG8IQ,AH7IR,iNG6IQ,CH5IT,AFrBL,wRE4BM,gBAAiB,CAClB,AF7BL,gBEsIM,eAvJa,CAwJd,AAED,uBACE,eAtJc,CAuJf,AAED,uBACE,eArJc,CAsJf,AE7HH,6BJlBF,cASI,kBAAA,AAAU,eAAV,AAAU,UAAA,AACV,wBAAA,AAAgB,qBAAhB,AAAgB,eAAA,CAUnB,AApBD,mBAaM,aAAc,CAKf,AAlBL,wBAgBQ,oBAAqB,CACtB,CAAA,AAOP,cE4FI,eAAe,AACf,iBAAiB,AACjB,qBAAqB,AACrB,cGxHU,AHyHV,kBCtIsC,ADuItC,gBAzIW,AA0IX,iBAAiB,AF/FnB,cAAc,AACd,UAAW,CACZ,AALD,gBEhBE,+CAAiD,AACjD,yCAA6C,AAC7C,4CAA8C,AAC9C,aG0JY,CH1HX,AFnBH,4CETI,gIAAA,AAAyO,wGAAA,AACzO,6KI7BQ,CJ2CT,AFNH,4EELM,mBG8IQ,AH7IR,iNG6IQ,CLzId,AEHK,kEAFC,mBG8IQ,AH7IR,iNG6IQ,CH5IT,AFGL,wREIM,gBAAiB,CAClB,AA+FD,qBACE,eAxIU,CAyIX,AAED,qBACE,eAvIU,CAwIX,AFnGL,cACE,cAAc,AACd,UAAW,CACZ,AAID,gBACE,eAAgB,CAajB,AIlCC,wBJoBF,gBAII,eAAgB,CAUnB,CAAA,AAdD,sBAQI,mBAAoB,CACrB,AATH,gCAYI,WAAY,CACb","file":"custom.css","sourcesContent":["// ==== HOMEPAGE ==== //\n\n@import \"../../source/scss/dependencies/import\";\n\n\n// Custom styles for the homepage.\n\n// 1. General\n// 2. Blogs\n// 3. Search\n\n// 1. General //\n\n.section {\n  @include clearfix;\n\n  display: block;\n  margin-top: 4rem;\n}\n\n.section-title {\n  @include ctnr(one);\n\n  @include font(header1);\n\n  margin-top: 1rem;\n}\n\n.section-body {\n  @include ctnr(two);\n\n  @include font(body);\n\n  margin: 1rem 0;\n  clear: right;\n\n  @include mappy-query(desktop-large) {\n    columns: 2;\n    column-gap: 2rem;\n\n    span {\n      display: block;\n\n      span {\n        display: inline-block;\n      }\n    }\n  }\n}\n\n// 2. Blogs //\n\n.section-year {\n  @include font(header3);\n\n  display: block;\n  width: 100%;\n}\n\n.section-blog {\n  display: block;\n  width: 100%;\n}\n\n// 3. Search //\n\n.section-search {\n  margin-top: 4rem;\n\n  @include mappy-query(tablet) {\n    margin-top: 6rem;\n  }\n\n  input {\n    padding-left: 2.5rem;\n  }\n\n  .form-highlight {\n    left: 2.5rem;\n  }\n}\n","// ==== LAYOUT ==== //\n\n// Define all global layouts and layout styles here.\n\n// 1. Breakpoints\n// 2. Helpers\n// 3. ctnr()\n\n// 1. Breakpoints //\n\n$breakpoints: (x-small: 359px, small: 576px, medium: 769px, large: 1025px, x-large: 1441px);\n\n// You can use any valid arguments inserted into mappy-bp as the map values. Any of the following would do.\n$mappy-queries: (\n  phone: mappy-bp(max-width small),\n  tablet: mappy-bp(small),\n  desktop: mappy-bp(medium),\n  desktop-large: mappy-bp(large)\n);\n\n// 2. Helpers //\n\n@mixin clearfix {\n  &::after {\n    display: table;\n    clear: both;\n    content: \"\";\n  }\n}\n\n// 3. ctnr() //\n\n// Content can take on four different widths: full, three, two and one.\n\n$container-width: 50rem;\n\n@mixin ctnr($width: null) {\n  @if $width == null {\n    @warn \"Mixin ctnr() received no input! Please provide a width.\";\n  }\n  @else if $width == \"full\" {\n    display: block;\n    width: 100vw;\n    max-width: 100%;\n    clear: both;\n  }\n  @else if $width == \"three\" {\n    display: block;\n    width: auto;\n    max-width: calc(100% - 4rem);\n    margin-right: auto;\n    margin-left: auto;\n\n    @include mappy-query(desktop) {\n      width: calc(100% - 8rem);\n      max-width: $container-width;\n    }\n  }\n  @else if $width == \"two\" {\n    @include clearfix;\n\n    display: block;\n    width: 100%;\n\n    @include mappy-query(tablet) {\n      width: 70%;\n      max-width: $container-width * 0.7;\n      padding-left: 2rem;\n      float: right;\n    }\n  }\n  @else if $width == \"one\" {\n    @include clearfix;\n\n    display: block;\n    width: 100%;\n\n    @include mappy-query(tablet) {\n      width: 30%;\n      max-width: $container-width * 0.3;\n      padding-right: 2rem;\n      float: left;\n    }\n  }\n  @else {\n    @warn \"Mixin ctnr() received invalid input! This width does not exist.\";\n  }\n}\n","// ==== TYPOGRAPHY ==== //\n\n// Define all global font styles here.\n\n// 1. Variables\n// 2. font()\n\n// 1. Variables //\n\n$sans: \"freight-sans-pro\", \"FreightSans Pro\", \"PT Sans\", Arial, sans-serif;\n$sans-normal: 500;\n$sans-semibold: 600;\n$sans-bold: 700;\n\n$serif: \"freight-text-pro\", \"FreightText Pro\", \"Times New Roman\", Times, serif;\n$serif-normal: 500;\n$serif-semibold: 700;\n$serif-bold: 900;\n\n$macro: \"freight-macro-pro\", \"FreightMacro Pro\", \"Roboto Slab\", Georgia, serif;\n$macro-normal: 500;\n$macro-semibold: 600;\n$macro-bold: 700;\n\n$code: \"Courier New\", Courier, monospace;\n\n$ms-base: 1rem;\n$ms-ratio: 1.25;\n\n$typi: (null: (12px, 2), x-small: 16px, medium: 20px, x-large: 24px);\n\n// 2. underline() //\n\n@mixin underline($bg-color: white, $bg-shade: base, $txt-color: $primary) {\n  $selection-color: palette(blue, lighter);\n\n  background-repeat: no-repeat, no-repeat, repeat-x;\n  background-position: 0% 90%, 100% 90%, 0% 90%;\n  background-size: .05em 1px, .05em 1px, 1px 1px;\n  color: palette($txt-color);\n\n  &:hover,\n  &:focus {\n    background-image: linear-gradient(palette($bg-color, $bg-shade), palette($bg-color, $bg-shade)), linear-gradient(palette($bg-color, $bg-shade), palette($bg-color, $bg-shade)), linear-gradient(palette($txt-color), palette($txt-color));\n    text-shadow: .03em 0 palette($bg-color, $bg-shade), -.03em 0 palette($bg-color, $bg-shade), 0 .03em palette($bg-color, $bg-shade), 0 -.03em palette($bg-color, $bg-shade), .06em 0 palette($bg-color, $bg-shade), -.06em 0 palette($bg-color, $bg-shade), .09em 0 palette($bg-color, $bg-shade), -.09em 0 palette($bg-color, $bg-shade), .12em 0 palette($bg-color, $bg-shade), -.12em 0 palette($bg-color, $bg-shade), .15em 0 palette($bg-color, $bg-shade), -.15em 0 palette($bg-color, $bg-shade);\n\n    &::selection {\n      background: $selection-color;\n      text-shadow: .03em 0 $selection-color, -.03em 0 $selection-color, 0 .03em $selection-color, 0 -.03em $selection-color, .06em 0 $selection-color, -.06em 0 $selection-color, .09em 0 $selection-color, -.09em 0 $selection-color, .12em 0 $selection-color, -.12em 0 $selection-color, .15em 0 $selection-color, -.15em 0 $selection-color;\n    }\n\n    &::before,\n    &::after,\n    *,\n    *::before,\n    *::after {\n      text-shadow: none;\n    }\n  }\n}\n\n// 3. font() //\n\n// The font() function accepts a style parameter.\n// It is intended to promote consistency in the typography,\n// therefore the number of styles should be kept to a minimum.\n// Attributes which change between instances should not be defined here (e.g. color).\n\n@mixin font($style: null) {\n  a {\n    @include underline();\n  }\n\n  @if $style == null {\n    @warn \"Mixin font() received no input! Please provide a style.\";\n\n    color: red;\n    font-size: ms(10);\n  }\n  @else if $style == \"title\" {\n    color: palette(gray, dark);\n    font-size: ms(4);\n    font-weight: $sans-bold;\n    line-height: 1.4;\n\n    a {\n      background-size: .05em 2px, .05em 2px, 2px 2px;\n    }\n\n    .serif & {\n      font-weight: $serif-bold;\n    }\n\n    .macro & {\n      font-weight: $macro-bold;\n    }\n  }\n  @else if $style == \"header1\" {\n    margin-top: .1rem;\n    margin-bottom: .5rem;\n    clear: right;\n    font-size: ms(3);\n    font-weight: $sans-bold;\n    line-height: 1.25;\n\n    &::after {\n      display: block;\n      width: 2em;\n      height: 0.16em;\n      margin-top: .5rem;\n      border-radius: 0.08em;\n      background-color: palette($primary);\n      content: \"\";\n    }\n\n    .serif & {\n      font-weight: $serif-bold;\n    }\n\n    .macro & {\n      font-weight: $macro-bold;\n    }\n  }\n  @else if $style == \"header2\" {\n    display: inline;\n    margin-top: .5rem;\n    margin-bottom: .25rem;\n    font-size: ms(2);\n    font-weight: $sans-bold;\n    line-height: 1.25;\n\n    a {\n      background-size: .05em 2px, .05em 2px, 2px 2px;\n    }\n\n    .serif & {\n      font-weight: $serif-bold;\n    }\n\n    .macro & {\n      font-weight: $macro-bold;\n    }\n  }\n  @else if $style == \"header3\" {\n    display: inline;\n    margin-top: .5rem;\n    margin-bottom: .25rem;\n    color: palette(gray, dark);\n    font-size: ms(1);\n    font-weight: $sans-bold;\n    line-height: 1.25;\n\n    .serif & {\n      font-weight: $serif-bold;\n    }\n\n    .macro & {\n      font-weight: $macro-bold;\n    }\n  }\n  @else if $style == \"body\" {\n    a {\n      font-weight: $sans-semibold;\n    }\n\n    .serif & a {\n      font-weight: $serif-semibold;\n    }\n\n    .macro & a {\n      font-weight: $macro-semibold;\n    }\n  }\n  @else if $style == \"quote\" {\n    color: palette(gray, dark);\n    font-size: ms(4);\n    line-height: 1.4;\n\n    a {\n      background-size: .05em 2px, .05em 2px, 2px 2px;\n      font-weight: $sans-bold;\n    }\n\n    .serif & a {\n      font-weight: $serif-bold;\n    }\n\n    .macro & a {\n      font-weight: $macro-bold;\n    }\n  }\n  @else if $style == \"app\" {\n    color: palette(gray);\n    font-family: $sans;\n    font-size: ms(-1);\n    font-weight: $sans-semibold;\n    letter-spacing: 0.25px;\n    line-height: 1.5;\n  }\n  @else {\n    @warn \"Mixin font() received invalid input! This style does not exist.\";\n\n    color: red;\n    font-size: ms(10);\n  }\n}\n","@function ms-calc($Value, $Base: $ms-base, $Ratio: $ms-ratio) {\n  \n  // If pow exists use it.\n  // It supports non-interger values!\n  @if $MS-pow-exists {\n\n    // The formula for figuring out modular scales is:\n    // (r^v)*b\n    @return pow($Ratio, $Value) * $Base;\n  }\n\n  // If not, use ms-pow().\n  // Not as fast or capable of non-integer exponents.\n  @else {\n    @return ms-pow($Ratio, $Value) * $Base;\n  }\n}","// Mappy breakpoints\n// -----------------\n// Output media query with focus on min-width, max-width, min-height and max-height.\n// Other media rules are passed as the second argument in a map\n//\n// @author Zell Liew\n// =================\n$breakpoints: () !default;\n$mappy-queries: () !default;\n\n// Mappy BP [Mixin]\n// ----------------\n// - $queries         : <string> or <number> in the format:\n//                      <min-width> <max-width> h <min-height> <max-height> <key> <value>\n// - $type            : <media-type>\n// - $query-fallback  : <string> selector class\n// - $breakpoints     : <map>\n@mixin mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n\n  // Gets mappy map through mappy-bp fn\n  $mappy-map: mappy-bp($queries, $type, $query-fallback, $breakpoints);\n\n  // Outputs media string\n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if $query-fallback {\n    #{$query-fallback} & {\n      @content;\n    }\n  }\n}\n\n// Mappy Query [Mixin]\n// -------------------\n// Output query from $mappy-queries map.\n// $query : <string> from $mappy-queries key\n@mixin mappy-query($query, $mappy-queries: $mappy-queries) {\n  @if not map-has-key($mappy-queries, $query) {\n    @error \"#{$mappy-queries} does not contain #{$query}\";\n  }\n\n  $mappy-map: map-get($mappy-queries, $query);\n\n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if map-get($mappy-map, query-fallback) {\n    #{map-get($mappy-map, query-fallback)} & {\n      @content;\n    }\n  }\n}\n\n// Mappy BP [Function]\n// -------------------\n// Returns a map with 3 keys\n// - type           : Media type\n// - media-string   : media query string\n// - query-fallback : query fallback (if any)\n@function mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  $media-string: ();\n  $_return: ();\n  $media-map: parse-bp($queries, $breakpoints);\n\n  @each $key, $value in $media-map {\n    @if $value and $value != 0 {\n      @if $media-string == (()) {\n        $media-string: append($media-string, unquote(\"(#{$key}: #{$value})\"));\n      }\n\n      @else {\n        $media-string: append($media-string, unquote(\"and (#{$key}: #{$value})\"));\n      }\n    }\n  }\n  $_return: (\n    type: $type,\n    media-string: implode($media-string),\n    query-fallback: $query-fallback\n  );\n\n  @return $_return;\n}\n\n// BP [Mixin]\n// ----------\n// Convenience mixin for Mappy Breakpoints\n@mixin bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  @include mappy-bp($queries, $type, $query-fallback, $breakpoints) {\n    @content;\n  }\n}\n\n// Parse BP [function]\n// -------------------\n// Parses arguments and returns a map with 4 keys\n@function parse-bp($queries, $breakpoints) {\n  $_return: ();\n  $_i: 1;\n  $_minw: null;\n  $_maxw: null;\n  $_minh: null;\n  $_maxh: null;\n  $_length: length($queries);\n\n  // Checks for width queries\n  $_minw: nth($queries, 1);\n  $_minw: mappy-validate($_minw, $breakpoints);\n\n  // Check for width queries\n  @if $_minw {\n    $_minw: mappy-convert-to-em($_minw);\n    $_return: map-merge($_return, (min-width: $_minw));\n    $queries: set-nth($queries, 1, null);\n  }\n\n  // Checks if there is a max width query\n  @if $_minw and $_length >= 2 {\n    $_maxw: nth($queries, 2);\n    $_maxw: mappy-validate($_maxw, $breakpoints);\n  }\n\n  @if $_maxw {\n    $_maxw: mappy-convert-to-em($_maxw - 1px);\n    $_return: map-merge($_return, (max-width: $_maxw));\n    $queries: set-nth($queries, 2, null);\n  }\n\n  // Checks for height queries\n  $_h: index($queries, h) or index($queries, height);\n\n  @if $_h {\n    $_minh: nth($queries, $_h + 1);\n    $_minh: mappy-validate($_minh, $breakpoints);\n\n    @if $_minh {\n      $_minh: mappy-convert-to-em($_minh);\n      $_return: map-merge($_return, (min-height: $_minh));\n      $queries: set-nth($queries, $_h + 1, null);\n    }\n\n    // Checks if there is a max height query\n    @if $_length - $_h >= 2 {\n      $_maxh: nth($queries, $_h + 2);\n      $_maxh: mappy-validate($_maxh, $breakpoints);\n    }\n\n    @if $_maxh {\n      $_maxh: mappy-convert-to-em($_maxh - 1px);\n      $_return: map-merge($_return, (max-height: $_maxh));\n      $queries: set-nth($queries, $_h + 2, null);\n    }\n    // Reset h marker\n    $queries: set-nth($queries, $_h, null);\n  }\n\n  // Checks for other queries\n  @while $_i <= length($queries) {\n    $_key: nth($queries, $_i);\n\n    @if $_key and $_length - $_i >= 1 {\n      $_val: nth($queries, $_i + 1);\n      $_return: map-merge($_return, (#{$_key}: $_val));\n      $queries: set-nth($queries, $_i, null);\n      $queries: set-nth($queries, $_i + 1, null);\n    }\n\n    @else if $_key {\n      @warn unquote('\"Mappy Breakpoints is missing value for media feature \"#{$_key}\"\"');\n    }\n    $_i: $_i + 1;\n  }\n  @return $_return;\n}\n\n// Mappy Validate [Function]\n// -------------------------\n// Checks if $query given is one of the following:\n// 1) Is a $key in the $breakpoints map\n// 2) Is a number\n// 3) Is a \"max\", \"max-width\" or \"max-height\" string\n@function mappy-validate($query, $breakpoints) {\n  $_return: null;\n\n  @if map-has-key($breakpoints, $query) {\n    $_return: map-get($breakpoints, $query);\n  }\n\n  @else if type-of($query) == number {\n    $_return: $query;\n  }\n\n  @else if $query == \"max\" or $query == \"max-height\" or $query == \"max-width\" {\n    $_return: 0;\n  }\n\n  @else {\n    $_return: null;\n  }\n  @return $_return;\n}\n\n// Mappy Convert To Em [Function]\n// -------------------------------\n// Checks and converts px values to em. Leave other units untouched.\n\n@function mappy-convert-to-em($val) {\n  @if unit($val) == \"px\" or $val == 0 {\n    @return mappy-em($val);\n  } @else if unit($val) == \"em\" {\n    @return $val;\n  } @else if unit($val) == \"rem\" {\n    @return mappy-strip-unit($val) * 1em;\n  } @else {\n    @error unquote(\"Breakpoint value must have a unit if it's a number\");\n  }\n}\n\n// Mappy Em [Function]\n// --------------------\n// Converts pixels to em with $base-font-size\n// - https://gist.github.com/ijy/1441967\n@function mappy-em($target, $context: 16px) {\n  @if $target == 0 {\n    @return 0;\n  }\n  @return $target / $context * 1em;\n}\n\n@function mappy-strip-unit($num) {\n  @return $num / ($num * 0 + 1);\n}\n\n// Implode [Function]\n// --------------------\n// Implode a list into a string\n@function implode($list, $glue: ' ') {\n  $res: null;\n  $len: length($list);\n\n  @for $i from 1 through $len {\n    $e: nth($list, $i);\n    @if $i == $len {\n      $res: unquote(\"#{$res}#{$e}\");\n    }\n    @else {\n      $res: unquote(\"#{$res}#{$e}#{$glue}\");\n    }\n  }\n\n  @return $res;\n}\n","//\n//\n//  𝗖 𝗢 𝗟 𝗢 𝗥\n//  v 1.4.0\n//\n//  ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n\n//  General\n//  ───────────────────────────────────\n\n$oc-white:         #ffffff;\n$oc-black:         #000000;\n\n\n//  Gray\n//  ───────────────────────────────────\n\n$oc-gray-list: (\n  \"0\": #f8f9fa,\n  \"1\": #f1f3f5,\n  \"2\": #e9ecef,\n  \"3\": #dee2e6,\n  \"4\": #ced4da,\n  \"5\": #adb5bd,\n  \"6\": #868e96,\n  \"7\": #495057,\n  \"8\": #343a40,\n  \"9\": #212529\n);\n\n$oc-gray-0: map-get($oc-gray-list, \"0\");\n$oc-gray-1: map-get($oc-gray-list, \"1\");\n$oc-gray-2: map-get($oc-gray-list, \"2\");\n$oc-gray-3: map-get($oc-gray-list, \"3\");\n$oc-gray-4: map-get($oc-gray-list, \"4\");\n$oc-gray-5: map-get($oc-gray-list, \"5\");\n$oc-gray-6: map-get($oc-gray-list, \"6\");\n$oc-gray-7: map-get($oc-gray-list, \"7\");\n$oc-gray-8: map-get($oc-gray-list, \"8\");\n$oc-gray-9: map-get($oc-gray-list, \"9\");\n\n\n//  Red\n//  ───────────────────────────────────\n\n$oc-red-list: (\n  \"0\": #fff5f5,\n  \"1\": #ffe3e3,\n  \"2\": #ffc9c9,\n  \"3\": #ffa8a8,\n  \"4\": #ff8787,\n  \"5\": #ff6b6b,\n  \"6\": #fa5252,\n  \"7\": #f03e3e,\n  \"8\": #e03131,\n  \"9\": #c92a2a\n);\n\n$oc-red-0: map-get($oc-red-list, \"0\");\n$oc-red-1: map-get($oc-red-list, \"1\");\n$oc-red-2: map-get($oc-red-list, \"2\");\n$oc-red-3: map-get($oc-red-list, \"3\");\n$oc-red-4: map-get($oc-red-list, \"4\");\n$oc-red-5: map-get($oc-red-list, \"5\");\n$oc-red-6: map-get($oc-red-list, \"6\");\n$oc-red-7: map-get($oc-red-list, \"7\");\n$oc-red-8: map-get($oc-red-list, \"8\");\n$oc-red-9: map-get($oc-red-list, \"9\");\n\n\n//  Pink\n//  ───────────────────────────────────\n\n$oc-pink-list: (\n  \"0\": #fff0f6,\n  \"1\": #ffdeeb,\n  \"2\": #fcc2d7,\n  \"3\": #faa2c1,\n  \"4\": #f783ac,\n  \"5\": #f06595,\n  \"6\": #e64980,\n  \"7\": #d6336c,\n  \"8\": #c2255c,\n  \"9\": #a61e4d\n);\n\n$oc-pink-0: map-get($oc-pink-list, \"0\");\n$oc-pink-1: map-get($oc-pink-list, \"1\");\n$oc-pink-2: map-get($oc-pink-list, \"2\");\n$oc-pink-3: map-get($oc-pink-list, \"3\");\n$oc-pink-4: map-get($oc-pink-list, \"4\");\n$oc-pink-5: map-get($oc-pink-list, \"5\");\n$oc-pink-6: map-get($oc-pink-list, \"6\");\n$oc-pink-7: map-get($oc-pink-list, \"7\");\n$oc-pink-8: map-get($oc-pink-list, \"8\");\n$oc-pink-9: map-get($oc-pink-list, \"9\");\n\n\n//  Grape\n//  ───────────────────────────────────\n\n$oc-grape-list: (\n  \"0\": #f8f0fc,\n  \"1\": #f3d9fa,\n  \"2\": #eebefa,\n  \"3\": #e599f7,\n  \"4\": #da77f2,\n  \"5\": #cc5de8,\n  \"6\": #be4bdb,\n  \"7\": #ae3ec9,\n  \"8\": #9c36b5,\n  \"9\": #862e9c\n);\n\n$oc-grape-0: map-get($oc-grape-list, \"0\");\n$oc-grape-1: map-get($oc-grape-list, \"1\");\n$oc-grape-2: map-get($oc-grape-list, \"2\");\n$oc-grape-3: map-get($oc-grape-list, \"3\");\n$oc-grape-4: map-get($oc-grape-list, \"4\");\n$oc-grape-5: map-get($oc-grape-list, \"5\");\n$oc-grape-6: map-get($oc-grape-list, \"6\");\n$oc-grape-7: map-get($oc-grape-list, \"7\");\n$oc-grape-8: map-get($oc-grape-list, \"8\");\n$oc-grape-9: map-get($oc-grape-list, \"9\");\n\n\n//  Violet\n//  ───────────────────────────────────\n\n$oc-violet-list: (\n  \"0\": #f3f0ff,\n  \"1\": #e5dbff,\n  \"2\": #d0bfff,\n  \"3\": #b197fc,\n  \"4\": #9775fa,\n  \"5\": #845ef7,\n  \"6\": #7950f2,\n  \"7\": #7048e8,\n  \"8\": #6741d9,\n  \"9\": #5f3dc4\n);\n\n$oc-violet-0: map-get($oc-violet-list, \"0\");\n$oc-violet-1: map-get($oc-violet-list, \"1\");\n$oc-violet-2: map-get($oc-violet-list, \"2\");\n$oc-violet-3: map-get($oc-violet-list, \"3\");\n$oc-violet-4: map-get($oc-violet-list, \"4\");\n$oc-violet-5: map-get($oc-violet-list, \"5\");\n$oc-violet-6: map-get($oc-violet-list, \"6\");\n$oc-violet-7: map-get($oc-violet-list, \"7\");\n$oc-violet-8: map-get($oc-violet-list, \"8\");\n$oc-violet-9: map-get($oc-violet-list, \"9\");\n\n\n//  Indigo\n//  ───────────────────────────────────\n\n$oc-indigo-list: (\n  \"0\": #edf2ff,\n  \"1\": #dbe4ff,\n  \"2\": #bac8ff,\n  \"3\": #91a7ff,\n  \"4\": #748ffc,\n  \"5\": #5c7cfa,\n  \"6\": #4c6ef5,\n  \"7\": #4263eb,\n  \"8\": #3b5bdb,\n  \"9\": #364fc7\n);\n\n$oc-indigo-0: map-get($oc-indigo-list, \"0\");\n$oc-indigo-1: map-get($oc-indigo-list, \"1\");\n$oc-indigo-2: map-get($oc-indigo-list, \"2\");\n$oc-indigo-3: map-get($oc-indigo-list, \"3\");\n$oc-indigo-4: map-get($oc-indigo-list, \"4\");\n$oc-indigo-5: map-get($oc-indigo-list, \"5\");\n$oc-indigo-6: map-get($oc-indigo-list, \"6\");\n$oc-indigo-7: map-get($oc-indigo-list, \"7\");\n$oc-indigo-8: map-get($oc-indigo-list, \"8\");\n$oc-indigo-9: map-get($oc-indigo-list, \"9\");\n\n\n//  Blue\n//  ───────────────────────────────────\n\n$oc-blue-list: (\n  \"0\": #e8f7ff,\n  \"1\": #ccedff,\n  \"2\": #a3daff,\n  \"3\": #72c3fc,\n  \"4\": #4dadf7,\n  \"5\": #329af0,\n  \"6\": #228ae6,\n  \"7\": #1c7cd6,\n  \"8\": #1b6ec2,\n  \"9\": #1862ab\n);\n\n$oc-blue-0: map-get($oc-blue-list, \"0\");\n$oc-blue-1: map-get($oc-blue-list, \"1\");\n$oc-blue-2: map-get($oc-blue-list, \"2\");\n$oc-blue-3: map-get($oc-blue-list, \"3\");\n$oc-blue-4: map-get($oc-blue-list, \"4\");\n$oc-blue-5: map-get($oc-blue-list, \"5\");\n$oc-blue-6: map-get($oc-blue-list, \"6\");\n$oc-blue-7: map-get($oc-blue-list, \"7\");\n$oc-blue-8: map-get($oc-blue-list, \"8\");\n$oc-blue-9: map-get($oc-blue-list, \"9\");\n\n\n//  Cyan\n//  ───────────────────────────────────\n\n$oc-cyan-list: (\n  \"0\": #e3fafc,\n  \"1\": #c5f6fa,\n  \"2\": #99e9f2,\n  \"3\": #66d9e8,\n  \"4\": #3bc9db,\n  \"5\": #22b8cf,\n  \"6\": #15aabf,\n  \"7\": #1098ad,\n  \"8\": #0c8599,\n  \"9\": #0b7285\n);\n\n$oc-cyan-0: map-get($oc-cyan-list, \"0\");\n$oc-cyan-1: map-get($oc-cyan-list, \"1\");\n$oc-cyan-2: map-get($oc-cyan-list, \"2\");\n$oc-cyan-3: map-get($oc-cyan-list, \"3\");\n$oc-cyan-4: map-get($oc-cyan-list, \"4\");\n$oc-cyan-5: map-get($oc-cyan-list, \"5\");\n$oc-cyan-6: map-get($oc-cyan-list, \"6\");\n$oc-cyan-7: map-get($oc-cyan-list, \"7\");\n$oc-cyan-8: map-get($oc-cyan-list, \"8\");\n$oc-cyan-9: map-get($oc-cyan-list, \"9\");\n\n\n//  Teal\n//  ───────────────────────────────────\n\n$oc-teal-list: (\n  \"0\": #e6fcf5,\n  \"1\": #c3fae8,\n  \"2\": #96f2d7,\n  \"3\": #63e6be,\n  \"4\": #38d9a9,\n  \"5\": #20c997,\n  \"6\": #12b886,\n  \"7\": #0ca678,\n  \"8\": #099268,\n  \"9\": #087f5b\n);\n\n$oc-teal-0: map-get($oc-teal-list, \"0\");\n$oc-teal-1: map-get($oc-teal-list, \"1\");\n$oc-teal-2: map-get($oc-teal-list, \"2\");\n$oc-teal-3: map-get($oc-teal-list, \"3\");\n$oc-teal-4: map-get($oc-teal-list, \"4\");\n$oc-teal-5: map-get($oc-teal-list, \"5\");\n$oc-teal-6: map-get($oc-teal-list, \"6\");\n$oc-teal-7: map-get($oc-teal-list, \"7\");\n$oc-teal-8: map-get($oc-teal-list, \"8\");\n$oc-teal-9: map-get($oc-teal-list, \"9\");\n\n\n//  Green\n//  ───────────────────────────────────\n\n$oc-green-list: (\n  \"0\": #ebfbee,\n  \"1\": #d3f9d8,\n  \"2\": #b2f2bb,\n  \"3\": #8ce99a,\n  \"4\": #69db7c,\n  \"5\": #51cf66,\n  \"6\": #40c057,\n  \"7\": #37b24d,\n  \"8\": #2f9e44,\n  \"9\": #2b8a3e\n);\n\n$oc-green-0: map-get($oc-green-list, \"0\");\n$oc-green-1: map-get($oc-green-list, \"1\");\n$oc-green-2: map-get($oc-green-list, \"2\");\n$oc-green-3: map-get($oc-green-list, \"3\");\n$oc-green-4: map-get($oc-green-list, \"4\");\n$oc-green-5: map-get($oc-green-list, \"5\");\n$oc-green-6: map-get($oc-green-list, \"6\");\n$oc-green-7: map-get($oc-green-list, \"7\");\n$oc-green-8: map-get($oc-green-list, \"8\");\n$oc-green-9: map-get($oc-green-list, \"9\");\n\n\n//  Lime\n//  ───────────────────────────────────\n\n$oc-lime-list: (\n  \"0\": #f4fce3,\n  \"1\": #e9fac8,\n  \"2\": #d8f5a2,\n  \"3\": #c0eb75,\n  \"4\": #a9e34b,\n  \"5\": #94d82d,\n  \"6\": #82c91e,\n  \"7\": #74b816,\n  \"8\": #66a80f,\n  \"9\": #5c940d\n);\n\n$oc-lime-0: map-get($oc-lime-list, \"0\");\n$oc-lime-1: map-get($oc-lime-list, \"1\");\n$oc-lime-2: map-get($oc-lime-list, \"2\");\n$oc-lime-3: map-get($oc-lime-list, \"3\");\n$oc-lime-4: map-get($oc-lime-list, \"4\");\n$oc-lime-5: map-get($oc-lime-list, \"5\");\n$oc-lime-6: map-get($oc-lime-list, \"6\");\n$oc-lime-7: map-get($oc-lime-list, \"7\");\n$oc-lime-8: map-get($oc-lime-list, \"8\");\n$oc-lime-9: map-get($oc-lime-list, \"9\");\n\n\n//  Yellow\n//  ───────────────────────────────────\n\n$oc-yellow-list: (\n  \"0\": #fff9db,\n  \"1\": #fff3bf,\n  \"2\": #ffec99,\n  \"3\": #ffe066,\n  \"4\": #ffd43b,\n  \"5\": #fcc419,\n  \"6\": #fab005,\n  \"7\": #f59f00,\n  \"8\": #f08c00,\n  \"9\": #e67700\n);\n\n$oc-yellow-0: map-get($oc-yellow-list, \"0\");\n$oc-yellow-1: map-get($oc-yellow-list, \"1\");\n$oc-yellow-2: map-get($oc-yellow-list, \"2\");\n$oc-yellow-3: map-get($oc-yellow-list, \"3\");\n$oc-yellow-4: map-get($oc-yellow-list, \"4\");\n$oc-yellow-5: map-get($oc-yellow-list, \"5\");\n$oc-yellow-6: map-get($oc-yellow-list, \"6\");\n$oc-yellow-7: map-get($oc-yellow-list, \"7\");\n$oc-yellow-8: map-get($oc-yellow-list, \"8\");\n$oc-yellow-9: map-get($oc-yellow-list, \"9\");\n\n\n//  Orange\n//  ───────────────────────────────────\n\n$oc-orange-list: (\n  \"0\": #fff4e6,\n  \"1\": #ffe8cc,\n  \"2\": #ffd8a8,\n  \"3\": #ffc078,\n  \"4\": #ffa94d,\n  \"5\": #ff922b,\n  \"6\": #fd7e14,\n  \"7\": #f76707,\n  \"8\": #e8590c,\n  \"9\": #d9480f\n);\n\n$oc-orange-0: map-get($oc-orange-list, \"0\");\n$oc-orange-1: map-get($oc-orange-list, \"1\");\n$oc-orange-2: map-get($oc-orange-list, \"2\");\n$oc-orange-3: map-get($oc-orange-list, \"3\");\n$oc-orange-4: map-get($oc-orange-list, \"4\");\n$oc-orange-5: map-get($oc-orange-list, \"5\");\n$oc-orange-6: map-get($oc-orange-list, \"6\");\n$oc-orange-7: map-get($oc-orange-list, \"7\");\n$oc-orange-8: map-get($oc-orange-list, \"8\");\n$oc-orange-9: map-get($oc-orange-list, \"9\");\n\n\n//  Color list\n//  ───────────────────────────────────\n\n$oc-color-spectrum:   9;\n\n$oc-color-list: (\n  $oc-gray-list:      \"gray\",\n  $oc-red-list:      \"red\",\n  $oc-pink-list:      \"pink\",\n  $oc-grape-list:      \"grape\",\n  $oc-violet-list:      \"violet\",\n  $oc-indigo-list:      \"indigo\",\n  $oc-blue-list:      \"blue\",\n  $oc-cyan-list:      \"cyan\",\n  $oc-teal-list:      \"teal\",\n  $oc-green-list:      \"green\",\n  $oc-lime-list:      \"lime\",\n  $oc-yellow-list:      \"yellow\",\n  $oc-orange-list:      \"orange\"\n);\n","// ==== COLORS ==== //\n\n// Set all colors related things here.\n\n// 1. Base colors\n// 2. Color transformations\n// 3. palette()\n\n\n// 1. Base colors //\n\n$primary: blue;\n$secondary: teal;\n\n$black: #000;\n$white: #fff;\n\n\n// 2. Color transformations //\n\n// Sass map for the color palette; see `_library.scss` for the palette() function.\n$_palettes: (\n  black: (\n    base: $black,\n    light: $black,\n    dark: $black\n  ),\n  white: (\n    base: $white,\n    light: $white,\n    dark: $white\n  ),\n  gray: (\n    lighter: $oc-gray-1,\n    light:   $oc-gray-3,\n    base:    $oc-gray-6,\n    dark:    $oc-gray-8,\n    darker:  $oc-gray-9\n  ),\n  red: (\n    lighter: $oc-red-2,\n    light:   $oc-red-4,\n    base:    $oc-red-6,\n    dark:    $oc-red-8,\n    darker:  $oc-red-9\n  ),\n  pink: (\n    lighter: $oc-pink-2,\n    light:   $oc-pink-4,\n    base:    $oc-pink-6,\n    dark:    $oc-pink-8,\n    darker:  $oc-pink-9\n  ),\n  grape: (\n    lighter: $oc-grape-2,\n    light:   $oc-grape-4,\n    base:    $oc-grape-6,\n    dark:    $oc-grape-8,\n    darker:  $oc-grape-9\n  ),\n  violet: (\n    lighter: $oc-violet-2,\n    light:   $oc-violet-4,\n    base:    $oc-violet-6,\n    dark:    $oc-violet-8,\n    darker:  $oc-violet-9\n  ),\n  indigo: (\n    lighter: $oc-indigo-2,\n    light:   $oc-indigo-4,\n    base:    $oc-indigo-6,\n    dark:    $oc-indigo-8,\n    darker:  $oc-indigo-9\n  ),\n  blue: (\n    lighter: $oc-blue-2,\n    light:   $oc-blue-4,\n    base:    $oc-blue-6,\n    dark:    $oc-blue-8,\n    darker:  $oc-blue-9\n  ),\n  cyan: (\n    lighter: $oc-cyan-2,\n    light:   $oc-cyan-4,\n    base:    $oc-cyan-6,\n    dark:    $oc-cyan-8,\n    darker:  $oc-cyan-9\n  ),\n  teal: (\n    lighter: $oc-teal-2,\n    light:   $oc-teal-4,\n    base:    $oc-teal-6,\n    dark:    $oc-teal-8,\n    darker:  $oc-teal-9\n  ),\n  green: (\n    lighter: $oc-green-2,\n    light:   $oc-green-4,\n    base:    $oc-green-6,\n    dark:    $oc-green-8,\n    darker:  $oc-green-9\n  ),\n  lime: (\n    lighter: $oc-lime-2,\n    light:   $oc-lime-4,\n    base:    $oc-lime-6,\n    dark:    $oc-lime-8,\n    darker:  $oc-lime-9\n  ),\n  yellow: (\n    lighter: $oc-yellow-2,\n    light:   $oc-yellow-4,\n    base:    $oc-yellow-6,\n    dark:    $oc-yellow-8,\n    darker:  $oc-yellow-9\n  ),\n  orange: (\n    lighter: $oc-orange-2,\n    light:   $oc-orange-4,\n    base:    $oc-orange-6,\n    dark:    $oc-orange-8,\n    darker:  $oc-orange-9\n  )\n);\n\n\n// 3. palette() //\n\n// A simple function to retrieve a color from the palette.\n// Adapted from http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/\n@function palette($palette, $tone: \"base\") {\n  @return map-get(map-get($_palettes, $palette), $tone);\n}\n"]}